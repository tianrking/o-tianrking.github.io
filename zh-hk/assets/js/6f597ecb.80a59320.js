"use strict";(self.webpackChunkEl_Jardin_Secreto_de_w0x7ce=self.webpackChunkEl_Jardin_Secreto_de_w0x7ce||[]).push([[202],{3776:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var s=r(4848),t=r(8453);const i={},d=void 0,c={id:"micro-controladores/ESP32/esp32-zephyer-basic",title:"esp32-zephyer-basic",description:"source ~/zephyrproject/.venv/bin/activate",source:"@site/docs/micro-controladores/ESP32/esp32-zephyer-basic.md",sourceDirName:"micro-controladores/ESP32",slug:"/micro-controladores/ESP32/esp32-zephyer-basic",permalink:"/zh-hk/micro-controladores/ESP32/esp32-zephyer-basic",draft:!1,unlisted:!1,editUrl:"https://github.com/tianrking/tianrking.github.io/tree/V3.4/docs/micro-controladores/ESP32/esp32-zephyer-basic.md",tags:[],version:"current",lastUpdatedAt:1721284063e3,frontMatter:{}},l={},p=[{value:"CUS",id:"cus",level:2},{value:"\u5355\u8defPWM",id:"\u5355\u8defpwm",level:3},{value:"\u591a\u8defPWM",id:"\u591a\u8defpwm",level:3}];function o(n){const e={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"source ~/zephyrproject/.venv/bin/activate\ncd ~/zephyrproject\nwest zephyr-export\ncd ~/zephyrproject/zephyr"}),"\n",(0,s.jsx)(e.p,{children:"Sysbuild\nThe sysbuild makes possible to build and flash all necessary images needed to bootstrap the board with the ESP32 SoC."}),"\n",(0,s.jsx)(e.p,{children:"To build the sample application using sysbuild use the command:"}),"\n",(0,s.jsx)(e.p,{children:"west build -b esp_wrover_kit --sysbuild samples/hello_world"}),"\n",(0,s.jsx)(e.p,{children:"build/\n\u251c\u2500\u2500 hello_world\n\u2502   \u2514\u2500\u2500 zephyr\n\u2502       \u251c\u2500\u2500 zephyr.elf\n\u2502       \u2514\u2500\u2500 zephyr.bin\n\u251c\u2500\u2500 mcuboot\n\u2502    \u2514\u2500\u2500 zephyr\n\u2502       \u251c\u2500\u2500 zephyr.elf\n\u2502       \u2514\u2500\u2500 zephyr.bin\n\u2514\u2500\u2500 domains.yaml"}),"\n",(0,s.jsx)(e.p,{children:"Note"}),"\n",(0,s.jsx)(e.p,{children:"With --sysbuild option the bootloader will be re-build and re-flash every time the pristine build is used."}),"\n",(0,s.jsx)(e.p,{children:"Manual build"}),"\n",(0,s.jsx)(e.p,{children:"west build -b esp32_devkitc_wroom/esp32/procpu samples/hello_world"}),"\n",(0,s.jsx)(e.p,{children:"FLASH"}),"\n",(0,s.jsx)(e.p,{children:"west flash\nwest espressif monitor"}),"\n",(0,s.jsx)(e.h2,{id:"cus",children:"CUS"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5de5\u7a0b\u6587\u4ef6\u5939,\u4f8b\u5982 ",(0,s.jsx)(e.code,{children:"my_zephyr_project"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mkdir my_zephyr_project\ncd my_zephyr_project\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"west init"})," \u547d\u4ee4\u521d\u59cb\u5316\u5de5\u7a0b:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:" west init\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u8fd9\u5c06\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Zephyr \u5de5\u7a0b,\u5e76\u5c06\u5176\u94fe\u63a5\u5230\u4e4b\u524d\u5b89\u88c5\u7684 Zephyr \u6e90\u4ee3\u7801\u3002"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"west update"})," \u547d\u4ee4\u66f4\u65b0\u5de5\u7a0b:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"west update\nwest zephyr-export\n"})}),"\n",(0,s.jsx)(e.p,{children:"\u8fd9\u5c06\u4ece Zephyr \u6e90\u4ee3\u7801\u4e2d\u83b7\u53d6\u6240\u9700\u7684\u6a21\u5757\u548c\u5de5\u5177\u3002"}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u76ee\u5f55,\u4f8b\u5982 ",(0,s.jsx)(e.code,{children:"my_app"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"mkdir my_app\ncd my_app\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u5728 ",(0,s.jsx)(e.code,{children:"my_app"})," \u76ee\u5f55\u4e0b\u521b\u5efa\u4ee5\u4e0b\u6587\u4ef6:"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"CMakeLists.txt"}),": CMake \u6784\u5efa\u811a\u672c"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"prj.conf"}),": Zephyr \u914d\u7f6e\u6587\u4ef6"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"src/main.c"}),": \u5e94\u7528\u7a0b\u5e8f\u7684\u4e3b\u6e90\u6587\u4ef6"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u6587\u4ef6\u7684\u57fa\u672c\u5185\u5bb9:"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"CMakeLists.txt"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cmake",children:"cmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(my_app)\n\ntarget_sources(app PRIVATE src/main.c)\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"prj.conf"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"CONFIG_GPIO=y\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"src/main.c"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",children:'#include <zephyr/kernel.h>\n#include <zephyr/drivers/gpio.h>\n\nvoid main(void)\n{\n    printk("Hello, Zephyr!\\n");\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u8fd4\u56de\u5230\u5de5\u7a0b\u6839\u76ee\u5f55,\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"west build"})," \u547d\u4ee4\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"cd ..\nwest build -b esp32_devkitc_wroom/esp32/procpu my_app\n"})}),"\n",(0,s.jsxs)(e.p,{children:["\u8fd9\u5c06\u5728 ",(0,s.jsx)(e.code,{children:"build/"})," \u76ee\u5f55\u4e0b\u751f\u6210\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"west flash"})," \u547d\u4ee4\u5c06\u5e94\u7528\u7a0b\u5e8f\u70e7\u5f55\u5230\u5f00\u53d1\u677f:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"west flash\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:["\u4f7f\u7528 ",(0,s.jsx)(e.code,{children:"west espressif monitor"})," \u547d\u4ee4\u76d1\u89c6\u5f00\u53d1\u677f\u7684\u4e32\u53e3\u8f93\u51fa:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"west espressif monitor\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"west zephyr-export"}),"\n",(0,s.jsx)(e.p,{children:"\u4fee\u6539\u4ee3\u7801\u540e"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# west build -b esp_wrover_kit --sysbuild my_app\n# \u8207 overlay \u5339\u914d\nwest build -b esp32_devkitc_wroom/esp32/procpu my_app \nwest flash\nwest espressif monitor\n"})}),"\n",(0,s.jsxs)(e.p,{children:["-- my_app\n-- my_app -- boards\n-- my_app -- boards -- esp32_devkitc_wroom_procpu.overlay\n-- my_app -- src",(0,s.jsx)(e.br,{}),"\n","-- my_app -- src    -- main.c\n-- my_app -- CMakeLists.txt\n-- my_app -- prj.conf"]}),"\n",(0,s.jsx)(e.p,{children:"\u4f7f\u7528 \u4efb\u610f\u5f15\u811a\u8c03\u5236 PWM"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-txt",metastring:'title="prj.conf"',children:"CONFIG_STDOUT_CONSOLE=y\nCONFIG_PRINTK=y\nCONFIG_PWM=y\nCONFIG_LOG=y\nCONFIG_LOG_PRINTK=y\nCONFIG_LOG_MODE_IMMEDIATE=y\nCONFIG_PWM_LOG_LEVEL_DBG=y\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c",metastring:'title="CMakeLists.txt"',children:"\ncmake_minimum_required(VERSION 3.20.0)\nfind_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})\nproject(blinky_pwm)\n\ntarget_sources(app PRIVATE src/main.c)\n\n"})}),"\n",(0,s.jsx)(e.h3,{id:"\u5355\u8defpwm",children:"\u5355\u8defPWM"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",metastring:'title="single_pwm"',children:'// src/main.c\n#include <zephyr/kernel.h>\n#include <zephyr/sys/printk.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/pwm.h>\n#include <stdlib.h>\n\nstatic const struct pwm_dt_spec pwm_led0 = PWM_DT_SPEC_GET(DT_ALIAS(pwm_led0));\n\n// \u5b9a\u4e49\u53ef\u80fd\u7684\u9891\u7387\u548c\u5360\u7a7a\u6bd4\n#define FREQ_COUNT 5\n#define DUTY_COUNT 5\n\nconst uint32_t frequencies[FREQ_COUNT] = {10000, 5000, 1000, 100, 10}; // Hz\nconst uint8_t duty_cycles[DUTY_COUNT] = {10, 25, 30, 50, 80}; // %\n\nint main(void)\n{\n    int ret;\n    uint32_t current_freq;\n    uint8_t current_duty;\n    uint32_t period_ns;\n    uint32_t pulse_ns;\n\n    printk("PWM output with varying frequency and duty cycle\\n");\n\n    if (!device_is_ready(pwm_led0.dev)) {\n        printk("Error: PWM device %s is not ready\\n", pwm_led0.dev->name);\n        return 0;\n    }\n\n    printk("Configuring PWM on channel %d...\\n", pwm_led0.channel);\n\n    while (1) {\n        // \u968f\u673a\u9009\u62e9\u9891\u7387\u548c\u5360\u7a7a\u6bd4\n        current_freq = frequencies[rand() % FREQ_COUNT];\n        current_duty = duty_cycles[rand() % DUTY_COUNT];\n\n        // \u8ba1\u7b97\u5468\u671f\u548c\u8109\u51b2\u5bbd\u5ea6\uff08\u7eb3\u79d2\uff09\n        period_ns = NSEC_PER_SEC / current_freq;\n        pulse_ns = period_ns * current_duty / 100;\n\n        ret = pwm_set_dt(&pwm_led0, period_ns, pulse_ns);\n        if (ret) {\n            printk("Error %d: failed to set pulse width\\n", ret);\n            return 0;\n        }\n\n        printk("PWM set to %d Hz with %d%% duty cycle\\n", current_freq, current_duty);\n\n        // \u7b49\u5f855\u79d2\u540e\u66f4\u6539\u8bbe\u7f6e\n        k_sleep(K_SECONDS(5));\n    }\n\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'#include <zephyr/dt-bindings/pwm/pwm.h>\n\n/ {\n\taliases {\n\t\tpwm-0 = &ledc0;\n\t\tpwm-led0 = &pwm_led_blue;\n\t};\n\n\tpwmleds {\n\t\tcompatible = "pwm-leds";\n\t\tpwm_led_blue: pwm_led_gpio23 {\n\t\t\tlabel = "PWM LED0";\n\t\t\tpwms = <&ledc0 0 1000 PWM_POLARITY_NORMAL>;\n\t\t};\n\t};\n};\n\n&pinctrl {\n\tledc0_default: ledc0_default {\n\t\tgroup1 {\n\t\t\tpinmux = <LEDC_CH0_GPIO23>;\n\t\t\toutput-enable;\n\t\t};\n\t};\n};\n\n&ledc0 {\n\tpinctrl-0 = <&ledc0_default>;\n\tpinctrl-names = "default";\n\tstatus = "okay";\n\t#address-cells = <1>;\n\t#size-cells = <0>;\n\tchannel0@0 {\n\t\treg = <0x0>;\n\t\ttimer = <0>;\n\t};\n};\n'})}),"\n",(0,s.jsx)(e.h3,{id:"\u591a\u8defpwm",children:"\u591a\u8defPWM"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-c++",metastring:'title="mult_pwm"',children:'// src/main.c\n#include <zephyr/kernel.h>\n#include <zephyr/sys/printk.h>\n#include <zephyr/device.h>\n#include <zephyr/drivers/pwm.h>\n#include <stdlib.h>\n\nstatic const struct pwm_dt_spec pwm_led0 = PWM_DT_SPEC_GET(DT_ALIAS(pwm_led0));\nstatic const struct pwm_dt_spec pwm_led1 = PWM_DT_SPEC_GET(DT_ALIAS(pwm_led1));\n\n#define FREQ_COUNT 5\n#define DUTY_COUNT 5\n\nconst uint32_t frequencies[FREQ_COUNT] = {10000, 5000, 1000, 100, 10}; // Hz\nconst uint8_t duty_cycles[DUTY_COUNT] = {10, 25, 30, 50, 80}; // %\n\nvoid set_pwm(const struct pwm_dt_spec *pwm, uint32_t freq, uint8_t duty)\n{\n    uint32_t period_ns = NSEC_PER_SEC / freq;\n    uint32_t pulse_ns = period_ns * duty / 100;\n\n    int ret = pwm_set_dt(pwm, period_ns, pulse_ns);\n    if (ret) {\n        printk("Error %d: failed to set pulse width for %s\\n", ret, pwm->dev->name);\n    } else {\n        printk("PWM set for %s: %d Hz with %d%% duty cycle\\n", pwm->dev->name, freq, duty);\n    }\n}\n\nint main(void)\n{\n    printk("PWM output with varying frequency and duty cycle on two channels\\n");\n\n    if (!device_is_ready(pwm_led0.dev) || !device_is_ready(pwm_led1.dev)) {\n        printk("Error: PWM device(s) not ready\\n");\n        return 0;\n    }\n\n    printk("Configuring PWM on channels %d and %d...\\n", pwm_led0.channel, pwm_led1.channel);\n\n    while (1) {\n        uint32_t freq0 = frequencies[rand() % FREQ_COUNT];\n        uint8_t duty0 = duty_cycles[rand() % DUTY_COUNT];\n        uint32_t freq1 = frequencies[rand() % FREQ_COUNT];\n        uint8_t duty1 = duty_cycles[rand() % DUTY_COUNT];\n\n        set_pwm(&pwm_led0, freq0, duty0);\n        set_pwm(&pwm_led1, freq1, duty1);\n\n        k_sleep(K_SECONDS(5));\n    }\n\n    return 0;\n}\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:'#include <zephyr/dt-bindings/pwm/pwm.h>\n\n/ {\n    aliases {\n        pwm-0 = &ledc0;\n        pwm-led0 = &pwm_led_gpio23;\n        pwm-led1 = &pwm_led_gpio22;\n    };\n\n    pwmleds {\n        compatible = "pwm-leds";\n        pwm_led_gpio23: pwm_led_gpio23 {\n            label = "PWM LED0";\n            pwms = <&ledc0 0 1000 PWM_POLARITY_NORMAL>;\n        };\n        pwm_led_gpio22: pwm_led_gpio22 {\n            label = "PWM LED1";\n            pwms = <&ledc0 1 1000 PWM_POLARITY_NORMAL>;\n        };\n    };\n};\n\n&pinctrl {\n    ledc0_default: ledc0_default {\n        group1 {\n            pinmux = <LEDC_CH0_GPIO23>, <LEDC_CH1_GPIO22>;\n            output-enable;\n        };\n    };\n};\n\n&ledc0 {\n    pinctrl-0 = <&ledc0_default>;\n    pinctrl-names = "default";\n    status = "okay";\n    #address-cells = <1>;\n    #size-cells = <0>;\n    channel0@0 {\n        reg = <0x0>;\n        timer = <0>;\n    };\n    channel1@1 {\n        reg = <0x1>;\n        timer = <1>;\n    };\n};\n'})})]})}function a(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(o,{...n})}):o(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>d,x:()=>c});var s=r(6540);const t={},i=s.createContext(t);function d(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:d(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);